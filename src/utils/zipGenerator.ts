import JSZip from 'jszip';
import { saveAs } from 'file-saver';
import type { GeneratedDoc } from '../types';

/**
 * Converts markdown to HTML with minimal styling, or wraps existing HTML
 */
function markdownToHtml(content: string, title: string): string {
  let htmlContent = content;

  // Check if content is already HTML (contains HTML tags)
  const isAlreadyHtml = /<[a-z][\s\S]*>/i.test(content);

  if (!isAlreadyHtml) {
    // Convert Markdown to HTML
    htmlContent = content
      // Headers
      .replace(/^### (.*$)/gim, '<h3>$1</h3>')
      .replace(/^## (.*$)/gim, '<h2>$1</h2>')
      .replace(/^# (.*$)/gim, '<h1>$1</h1>')
      // Bold
      .replace(/\*\*(.*?)\*\*/gim, '<strong>$1</strong>')
      // Italic
      .replace(/\*(.*?)\*/gim, '<em>$1</em>')
      // Lists
      .replace(/^\- (.*$)/gim, '<li>$1</li>')
      // Line breaks
      .replace(/\n\n/g, '</p><p>')
      // Links
      .replace(/\[(.*?)\]\((.*?)\)/gim, '<a href="$2">$1</a>');
  }

  // Return pure HTML with minimal wrapper - no headers, no footers
  return `<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>${title} - CMG Financial</title>
  <style>
    body {
      font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', sans-serif;
      line-height: 1.6;
      max-width: 900px;
      margin: 0 auto;
      padding: 2rem;
      color: #2b3e50;
      background: #ffffff;
    }
    h1 {
      color: #2b3e50;
      margin-top: 0;
      margin-bottom: 1.5rem;
    }
    h2 {
      color: #2b3e50;
      margin-top: 2rem;
      margin-bottom: 1rem;
    }
    h3 {
      color: #1ab4a8;
      margin-top: 1.5rem;
      margin-bottom: 0.75rem;
    }
    p {
      margin-bottom: 1rem;
    }
    ul, ol {
      margin-bottom: 1rem;
      padding-left: 2rem;
    }
    li {
      margin-bottom: 0.5rem;
    }
    strong {
      color: #2b3e50;
      font-weight: 600;
    }
  </style>
</head>
<body>
  ${htmlContent}
</body>
</html>`;
}

/**
 * Creates a README file for the ZIP archive
 */
function createReadme(docs: GeneratedDoc[], projectName: string): string {
  const timestamp = new Date().toLocaleString();

  return `CMG Communications Documentation
Generated: ${timestamp}
Project: ${projectName}

CONTENTS
========

${docs.map((d, i) => `${i + 1}. ${d.filename}.html`).join('\n')}

USAGE
=====

Double-click any HTML file to open in your web browser.
The documents are styled and ready to view or share.

EDITING
=======

You can open HTML files in any text editor to modify the content,
or use the Communications Builder's Edit feature for a visual editing experience.

ABOUT
=====

Generated by: CMG Communications Builder
Powered by: OpenAI GPT-4
Website: https://www.cmgfi.com

Â© ${new Date().getFullYear()} CMG Financial. All rights reserved.
NMLS# 1820
`;
}

/**
 * Downloads generated documents as a ZIP file
 */
export async function downloadAsZip(
  docs: GeneratedDoc[],
  projectName: string = 'training-project'
): Promise<void> {
  try {
    const zip = new JSZip();
    const timestamp = new Date().toISOString().split('T')[0];
    const sanitizedProjectName = projectName.replace(/[^a-z0-9]/gi, '-').toLowerCase();

    // Create main folder
    const mainFolder = zip.folder('training-documents');
    if (!mainFolder) {
      throw new Error('Failed to create main folder');
    }

    // Add each document as HTML only
    docs.forEach((doc) => {
      const sanitizedFilename = doc.filename.replace(/[^a-z0-9]/gi, '-').toLowerCase();

      // HTML version only
      const htmlContent = markdownToHtml(doc.content, doc.filename);
      mainFolder.file(`${sanitizedFilename}.html`, htmlContent);
    });

    // Add README
    mainFolder.file('README.txt', createReadme(docs, projectName));

    // Generate ZIP file
    const blob = await zip.generateAsync({
      type: 'blob',
      compression: 'DEFLATE',
      compressionOptions: {
        level: 9, // Maximum compression
      },
    });

    // Download
    const filename = `${sanitizedProjectName}-${timestamp}.zip`;
    saveAs(blob, filename);
  } catch (error) {
    console.error('Error creating ZIP file:', error);
    throw new Error('Failed to create ZIP file. Please try again.');
  }
}

/**
 * Downloads a single document as HTML
 */
export function downloadSingleDocument(doc: GeneratedDoc): void {
  const sanitizedFilename = doc.filename.replace(/[^a-z0-9]/gi, '-').toLowerCase();

  // Always download as HTML with full document structure
  const fullHtml = markdownToHtml(doc.content, doc.filename);
  const blob = new Blob([fullHtml], { type: 'text/html' });
  saveAs(blob, `${sanitizedFilename}.html`);
}
